@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model SimplexDataViewModel
<div id="searchresults" class="bd-callout bd-callout-warning ">
    Исходная функция в канонической форме
    <p style="white-space:pre-line">
        @Model.PrintCanonF()
        @Model.PrintCanonLimits()
    </p>
    @{
        int i;
        int k = 0; 
        Iteration literation = Model.Iterations.Last();

    }

    @foreach (var iteration in Model.Iterations)
    {
        <table class="table">
            <thead>
                <tr>
                    <th style="width: 6%" scope="col">Итерация @k</th>
                    @{ k++;
                    }
                    @for (i = 1; i < Model.canonLimits.GetLength(1); i++)
                    {
                        <th style="width: 6%" scope="col">X<sub>@i</sub></th>
                    }
                    @for (i = 1; i <= Model.countofofArtificalvar; i++)
                    {
                        <th style="width: 6%" scope="col">U<sub>@i</sub></th>
                    }

                    <th style="width: 6%">B</th>
                </tr>

            </thead>
            <tbody>

                @for (i = 0; i < iteration.Matrix.GetLength(0) - 1; i++)
                {


                    <tr>
                        @if (iteration.Basis[i] != null)
                        {
                            <th scope="row">@iteration.Basis[i].Item2</th>
                        }
                        else
                        {
                            <th scope="row">?</th>
                        }
                        @for (var j = 0; j < iteration.Matrix.GetLength(1); j++)
                        {

                            if (i == iteration.pivotRow && j == iteration.pivotCol)
                            {
                                if (Model.NumberRepresent)
                                {
                                    <td style="background-color:cyan;">@iteration.Matrix[i, j] </td>
                                }
                                else
                                {
                                    <td style="background-color:cyan;">@iteration.Matrix[i, j].AsRoundDouble </td>
                                }
                            }
                            else
                            {
                                if (Model.NumberRepresent)
                                {
                                    <td>@iteration.Matrix[i, j] </td>
                                }
                                else
                                {
                                    <td>@iteration.Matrix[i, j].AsRoundDouble </td>
                                }
                            }


                        }


                    </tr>
                }

                <tr>
                    <th scope="row">F</th>
                    @for (var j = 0; j < iteration.Matrix.GetLength(1); j++)
                    {

                        if (Model.NumberRepresent)
                        {
                            <td>@iteration.Matrix[i, j] </td>
                        }
                        else
                        {
                            <td>@iteration.Matrix[i, j].AsRoundDouble </td>
                        }
                    }
                </tr>
            </tbody>
        </table>

        <p>Опорный план: @iteration.AllVar() F=@iteration.F</p>
    }
    @if (Model.status == SimplexDataViewModel.Status.SOLVED)
    {

       <p>
            Ответ:
            @for (i = 0; i < Model.canonLimits.GetLength(1)-1; i++)
            {
            <p>x<sub>@(i+1)</sub>=@literation.AllVariables[i]</p>

             }
            <p>F=@literation.F</p>
        </p>
     }
    @if (Model.status == SimplexDataViewModel.Status.NO_SOLUTIONS)
    {
        <p>Нет решений</p>
    }
    @if (Model.status == SimplexDataViewModel.Status.UNLIMITED)
    {
      <p>Функция не ограничена. Оптимальное решение отсутствует.</p>
    }
</div>