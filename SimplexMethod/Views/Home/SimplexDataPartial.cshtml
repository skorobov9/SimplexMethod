@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model SimplexDataViewModel
<div id="searchresults" class="bd-callout bd-callout-warning" >
    <p class="text-info">Исходная задача в канонической форме</p>
    <p style="white-space:pre-line; overflow-x:auto">
        @Model.PrintCanonF()
        @Model.PrintCanonLimits()
    </p>
    @{
        int i,j;
        int k = 0;
        Iteration literation = Model.Iterations.Last();

    }

    @foreach (var iteration in Model.Iterations)
    {
        <div class="table-responsive-md" style="overflow-x:auto">
            <table class="table w-auto">
                <thead>
                    <tr>
                        <th scope="col">Итерация @k</th>
                        @{ k++;
                        }
                  
                        @for (i = 1; i < Model.canonLimits.GetLength(1); i++)
                        {
                            <th scope="col">X<sub>@i</sub></th>
                        }
                        @for (j = 1; j <= Model.СountofArtificalvar; j++)
                        {
                            if (iteration.IsBaseVariable(i++))
                            {
                            <th scope="col">U<sub>@j</sub></th>
                            }
                        }

                        <th>B</th>
                    </tr>

                </thead>
                <tbody>

                    @for (i = 0; i < iteration.Matrix.GetLength(0) - 1; i++)
                    {
                    <tr>
                        @if (iteration.Basis[i] != null)
                        {
                            <th scope="row">@iteration.Basis[i].Item2</th>
                        }
                        else
                        {
                            <th scope="row">?</th>
                        }
                        @for (j = 0; j < iteration.Matrix.GetLength(1) - 1; j++)
                        {
                            if (!(!iteration.IsBaseVariable(j + 1) && j + 1 > Model.canonLimits.GetLength(1) - 1))
                            {

                                if (i == iteration.pivotRow && j == iteration.pivotCol)
                                {
                                    if (Model.NumberRepresent)
                                    {
                                        <td style="background-color:cyan;">@iteration.Matrix[i, j] </td>
                                    }
                                    else
                                    {
                                        <td style="background-color:cyan;">@iteration.Matrix[i, j].AsRoundDouble </td>
                                    }
                                }
                                else
                                {
                                    if (Model.NumberRepresent)
                                    {
                                        <td>@iteration.Matrix[i, j] </td>
                                    }
                                    else
                                    {
                                        <td>@iteration.Matrix[i, j].AsRoundDouble </td>
                                    }
                                }


                            }
                        }
                        @if (Model.NumberRepresent)
                        {
                        <td>@iteration.Matrix[i, j] </td>
                        }
                        else
                        {
                        <td>@iteration.Matrix[i, j].AsRoundDouble </td>
                        }

                    </tr>
                    }

                <tr>
                    <th scope="row">F</th>
                    @for (j = 0; j < iteration.Matrix.GetLength(1) - 1; j++)
                    {
                        if (!(!iteration.IsBaseVariable(j + 1) && j + 1 > Model.canonLimits.GetLength(1) - 1))
                        {
                            if (Model.NumberRepresent)
                            {
                                <td>@iteration.Matrix[i, j] </td>
                            }
                            else
                            {
                                <td>@iteration.Matrix[i, j].AsRoundDouble </td>
                            }
                        }
                    }
                    @if (Model.NumberRepresent)
                    {
                    <td>@iteration.Matrix[i, j] </td>
                    }
                    else
                    {
                    <td>@iteration.Matrix[i, j].AsRoundDouble </td>
                    }

                </tr>
                </tbody>
            </table>
        </div>

        if (Model.NumberRepresent)
        {
            <p>Опорный план: @iteration.AllVar() F=@iteration.F</p>
        }
        else
        {
            <p>Опорный план: @iteration.AllVarAsDouble() F=@iteration.F.AsRoundDouble</p>
        }
    }
    @if (Model.status == SimplexDataViewModel.Status.SOLVED)
    {

        if (Model.NumberRepresent)
        {
            <div>

                Ответ:
                @for (i = 0; i < Model.M-1; i++)
                {
                <p>x<sub>@(i + 1)</sub>=@literation.AllVariables[i]</p>

                }
                <p>F=@literation.F</p>
            </div>
          }
          else
            {
                <div>

                    Ответ:
                    @for (i = 0; i < Model.M-1; i++)
                    {
                    <p>x<sub>@(i + 1)</sub>=@literation.AllVariables[i].AsRoundDouble</p>

                }
                    <p>F=@literation.F.AsRoundDouble</p>
                </div>
                }
            }
    @if (Model.status == SimplexDataViewModel.Status.NO_SOLUTIONS)
    {
        <p>Нет решений</p>
    }
    @if (Model.status == SimplexDataViewModel.Status.UNLIMITED)
    {
        <p>Функция не ограничена. Оптимальное решение отсутствует.</p>
    }
</div>